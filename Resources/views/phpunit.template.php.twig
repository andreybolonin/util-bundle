<?php

namespace {{ test_namespace }};

use PHPUnit_Framework_MockObject_MockObject;
use {{ original_full_name }};
{% for mock in mocks %}
{% if not mock.primitive %}
use {{ mock.mocked_class_name }};
{% endif %}
{% endfor %}

class {{ original_short_name }}Test extends \PHPUnit_Framework_TestCase
{
{% for mock in mocks %}
{% if mock.primitive %}
   /**
    * @var int|string|boolean|array
    */
    private ${{ mock.member_name }} = null;
{% else %}
   /**
    * @var PHPUnit_Framework_MockObject_MockObject|\{{ mock.mocked_class_name }}
    */
    private ${{ mock.member_name }};
{% endif %}
{% endfor %}

   /**
    * @var PHPUnit_Framework_MockObject_MockObject|\{{ original_full_name }}
    */
    private ${{ service_member_name }};

    public function setUp()
    {
{% for mock in mocks %}
{% if not mock.primitive %}
        $this->{{ mock.member_name }} = $this->getMockBuilder({{ mock.mocked_class_name_short }}::class)
            ->disableOriginalConstructor()->getMock();
{% endif %}
{% endfor %}

        $this->{{ service_member_name }} = new {{ original_short_name }}(
{% for mock in mocks %}
            $this->{{ mock.member_name }}{% if loop.length > 1 and not loop.last %},
{% endif %}
{% endfor %}

        );
    }
}